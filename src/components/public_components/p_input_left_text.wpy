<style lang='scss' scoped>
  @import '../../scss/common';
  .p-input-left-text {
    width: 100%;
    overflow-x: hidden;
    box-sizing: border-box;
  }
  .main {
    padding-left: 30rpx;
    background: #fff;
    box-sizing: border-box;
    .content {
      width: 100%;
      height: 90rpx;
      display: flex;
      align-items: center;
      border-bottom: 1rpx solid $borderColor;
      box-sizing: border-box;
      .left {
        flex: 1;
        font-size: 32rpx;
        color: #3F3F3F;
        // border: 1px solid green;
        box-sizing: border-box;
      }
      .right {
        // border: 1px solid green;
        width: 475rpx;
        input {
          font-size: 32rpx;
          color: #3F3F3F;
        }
      }
    }
  }
  #margin-value{
    margin-top: 30rpx;
  }
</style>

<template>
  <view class='p-input-left-text'>
    <view class="left-text">
      <view class="main" id="{{marginTop?'margin-value':''}}">
        <view class="content">
          <view class="left">{{text}}</view>
          <view class="right">
            <input 
              placeholder-style="color: #AAAAAA;font-size: 32rpx;" 
              value="{{model}}" 
              placeholder="{{placeholder}}" 
              maxlength="{{size}}"
              @input="change"></input>
          </view>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import tool from '@/mixins/tool'
  import router from '@/mixins/router'
  export default class PInputLeftText extends wepy.component {
    components = {}
    data = {}
    props={
      text: { // 左边名字
        default: '输入框名字'
      },
      model: {// 动态绑定的值
        default: '',
        twoWay: true
      },
      placeholder: {
        default: '请输入提示信息'
      },
      size: { // 输入框输入字符多少
        default: 20
      },
      marginTop: { // 是否margin-top 30rpx
        default: false
      }
    }
    mixins = [tool, router]
    methods = {
      change(e) {
        this.model = e.detail.value
        this.$apply()
        this.$emit('change', this.model)
      }
    }
    onLoad() {}
  }
</script>
